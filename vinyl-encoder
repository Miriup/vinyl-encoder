#!/bin/bash
#
# Processing steps:
#
# 1. Slice recording into its parts using Audacity labels and sox
#    Use silence to create a noise profile for each track; this allows noise reduction later on
# 2. Encode into compressed formats (MP3-128, MP3-320, FLAC)
# 3. Inject track number into compressed formats
# 4. Download discogs json file for reference. This is also to not download the info for each tagging run of the different formats.
# 5. Tag compressed formats
#
# Resources:
# - Recording, one for each Vinyl side
# - CSV containing mapping from recording file to discogs ID
# - Audacity label file for reach recording with silence marked up
# - discogs tagger config
#

set -x

# Load configuration
source $0.conf
# Check configuration
if [ ! -e ${DISCOGS_MAPPINGS} ]
then
	echo Discogs mappings CSV cannot be found
	exit 3
fi

#
# Step 1: Slice the files
#
for FILE in $*
do
	LAST_STOP=0			# The current audio position
	SUB=0				# The number of the current split (for noise profile)
	FILE_BASE=$(basename "${FILE}")	# Used to locate the Audacity labels later

	# Look up discogs ID
	# FIXME Why the heck doesn't this work with a pipe?! Context?
	grep ${FILE_BASE%.WAV} ${DISCOGS_MAPPINGS} > /tmp/dirk-vinyl-encoder
	read RECORDING DISCOGS_RELEASE DISCOGS_SIDE REST < /tmp/dirk-vinyl-encoder

	if [ "x${DISCOGS_RELEASE}" == "x" ] 
	then
		echo "No discogs ID for ${FILE_BASE%.WAV} in ${DISCOGS_MAPPINGS}"
		exit 2
	fi

	# Create Album dir, if it doesn't exist
	DIR_ALBUM=${DIR_TEMP_SPLIT}/${DISCOGS_RELEASE}
	if ! test -d ${DIR_ALBUM} 
	then
		mkdir ${DIR_ALBUM}
		echo ${DISCOGS_RELEASE} > ${DIR_ALBUM}/id.txt
	fi

	# Base setup of sox command to execute to split the files
	SOX_COMMANDS="sox ${FILE} ${DIR_TEMP_SPLIT}/${DISCOGS_RELEASE}/${DISCOGS_RELEASE}-${DISCOGS_SIDE}%1n.wav"		

	if [ ! -e ${DIR_LABEL}/${FILE_BASE%.WAV}.txt ]
	then
		echo "Label file not found: ${DIR_LABEL}/${FILE_BASE%.WAV}.txt"
		exit 4
	fi

	# Assumptions for the below: There's always a silence in the beginning
	# and always there is one at the end.
	# Useless use of cat ;-) FIXME How was this done properly?
	cat ${DIR_LABEL}/${FILE_BASE%.WAV}.txt | while read START STOP LABEL REST
	do
		if [ "x${START}" == "x" ]
		then
			echo "Label file ${DIR_LABEL}/${FILE_BASE%.WAV}.txt at line $SUB"
			exit 5
		fi
		#if [[ ${LABEL} == [0-9]* ]]
		#then
		#	echo Not implemented
		#	exit 1
		#else
			# Unknown label type, assume silence band tagging
			#
			# Generate the track WAV
			if [ "x${LAST_STOP}" != 'x0' ]
			then
				#SOX_COMMANDS="$SOX_COMMANDS trim =${LAST_STOP} =${START} : newfile :"
				OUTFILE=${DIR_TEMP_SPLIT}/${DISCOGS_RELEASE}/${DISCOGS_RELEASE}-${DISCOGS_SIDE}-${SUB}.wav 
				test -e $OUTFILE || sox ${FILE} ${OUTFILE} trim =${LAST_STOP} =${START} spectrogram -h -c '' -w Hamming -o ${DIR_TEMP_SPLIT}/${DISCOGS_RELEASE}/${DISCOGS_RELEASE}-${DISCOGS_SIDE}${SUB}-spectrogram.png
			fi
			# This comes after creating the audio track, but before the next noise profile is created so that the noise profiles are always labeled for the track that comes after them
			let SUB=${SUB}+1
			# Trim out silence and generate noise profile from it:
			OUTFILE=${DIR_TEMP_SPLIT}/${DISCOGS_RELEASE}/${DISCOGS_RELEASE}-${DISCOGS_SIDE}-${SUB}.noiseprofile
			#SOX_COMMANDS="$SOX_COMMANDS trim =${START} =${STOP} noiseprof ${DIR_TEMP_SPLIT}/${DISCOGS_RELEASE}/${DISCOGS_RELEASE}-${DISCOGS_SIDE}${SUB}.soxnoiseprof :"
			test -e $OUTFILE || sox ${FILE} -n trim =${START} =${STOP} noiseprof $OUTFILE
			LAST_START=${START}
			LAST_STOP=${STOP}
		#fi
	done
done
#
# Create ${DISCOGS_RELEASE}.json file if it doesn't exist
#

#
# Step 2: Encode into specified formats
#
# TODO There must be a better way than running `find`
#
find "${DIR_TEMP_SPLIT}" -type f -name '*.wav' | \
	while read FILE
	do
		#read DISCOGS_RELEASE DISCOGS_SIDE TRACK_NO EXTENSION <<< $(basename ${FILE})
		IFS='-.' read DISCOGS_RELEASE DISCOGS_SIDE TRACK_NO EXTENSION <<< $(basename ${FILE})
		for COMPRESSED_FORMAT in ${COMPRESSED_FORMATS}
		do
			# Create an array with the compression parameters
			IFS='-' read -a FORMAT_COMPONENTS <<< ${COMPRESSED_FORMAT}
			# Create container directory
			mkdir -p "${DIR_TEMP_COMPRESSED}/${COMPRESSED_FORMAT}/${DISCOGS_RELEASE}"
			ln $(dirname $FILE)/id.txt "${DIR_TEMP_COMPRESSED}/${COMPRESSED_FORMAT}/${DISCOGS_RELEASE}/"
			case "${COMPRESSED_FORMAT}" in
				MP3-*)
					# Encode as MP3
					MP3_BITRATE=${FORMAT_COMPONENTS[1]%-}
					case ${FORMAT_COMPONENTS[2]} in
						ABR)
							MP3_STRAT=" --abr $MP3_BITRATE -q0"
							;;
						VBR)
							MP3_STRAT=" --vbr-new -V0 -b $MP3_BITRATE"
							;;
						CBR)
							MP3_STRAT=" --cbr -q0 -b $MP3_BITRATE"
							;;
						*)
							echo "${FORMAT_COMPONENTS[2]} not understood."
							exit
							;;
					esac
					lame $MP3_STRAT --tn ${TRACK_NO} \
						"${FILE}" \
						"${DIR_TEMP_COMPRESSED}/${COMPRESSED_FORMAT}/${DISCOGS_RELEASE}/${DISCOGS_SIDE}${TRACK_NO}.mp3"
					;;
				FLAC-*)
					# Encode as FLAC
					FLAC_BPS=${FORMAT_COMPONENTS[1]}
					flac --keep-foreign-metadata --best --bps ${FLAC_BPS} \
						"${FILE}" \
						-o "${DIR_TEMP_COMPRESSED}/${COMPRESSED_FORMAT}/${DISCOGS_RELEASE}/${DISCOGS_SIDE}${TRACK_NO}.flac"
					;;
				*)
					echo "Compressed format \"${COMPRESSED_FORMAT}\" not recognised."
					exit
					;;
			esac
		done
	done
